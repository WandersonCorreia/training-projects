import json
import requests
from datetime import datetime
import openai
import base64
from dotenv import load_dotenv
import os

load_dotenv()  # Carrega as vari√°veis do .env


class AgenteSimples:
    def __init__(self, api_key=None):
        """
        Inicializa o agente com suas ferramentas e mem√≥ria
        """
        self.api_key = os.getenv("OPENAI_API_KEY")

        if self.api_key:
            self.openai_client = openai.OpenAI(api_key=self.api_key)
        else:
            self.openai_client = None
        self.memoria = []  # Hist√≥rico de conversas
        self.ferramentas = {
            "buscar_cep": self.buscar_cep,
            "calcular": self.calcular,
            "obter_data_hora": self.obter_data_hora,
            "validar_sql": self.validar_sql
        }

    def buscar_cep(self, cep):
        """Ferramenta para buscar informa√ß√µes de CEP"""
        try:
            url = f"https://viacep.com.br/ws/{cep}/json/"
            response = requests.get(url)
            if response.status_code == 200:
                data = response.json()
                if "erro" not in data:
                    return f"CEP {cep}: {data['logradouro']}, {data['bairro']}, {data['localidade']}-{data['uf']}"
                else:
                    return f"CEP {cep} n√£o encontrado"
            else:
                return "Erro ao consultar CEP"
        except Exception as e:
            return f"Erro: {str(e)}"

    def calcular(self, expressao):
        """Ferramenta para realizar c√°lculos simples"""
        try:
            # Valida√ß√£o b√°sica de seguran√ßa
            caracteres_permitidos = "0123456789+-*/()., "
            if all(c in caracteres_permitidos for c in expressao):
                resultado = eval(expressao)
                return f"Resultado: {resultado}"
            else:
                return "Express√£o cont√©m caracteres n√£o permitidos"
        except Exception as e:
            return f"Erro no c√°lculo: {str(e)}"

    def obter_data_hora(self):
        """Ferramenta para obter data e hora atual"""
        agora = datetime.now()
        return f"Data e hora atual: {agora.strftime('%d/%m/%Y %H:%M:%S')}"

    def validar_sql(self, caminho_sql):
        """Fun√ß√£o para ler um arquivo SQL e submeter o c√≥digo para valida√ß√£o usando GPT-4o."""
        if not self.openai_client:
            return "Erro: A chave de API da OpenAI n√£o foi configurada."

        try:
            # 1. L√™ o conte√∫do do arquivo SQL como texto (modo 'r')
            with open(caminho_sql, "r", encoding="utf-8") as f:
                codigo_sql = f.read()

            # 2. Cria o prompt de valida√ß√£o para a LLM
            prompt = f"""
            Voc√™ √© um especialista em valida√ß√£o de c√≥digo SQL. Analise o seguinte c√≥digo SQL com base nos seguintes crit√©rios:
            
            1.  **Sintaxe:** Verifique se h√° erros de sintaxe (palavras-chave incorretas, pontua√ß√£o, etc.).
            2.  **Boas Pr√°ticas:** Avalie se o c√≥digo segue boas pr√°ticas de escrita, como uso de aliases, formata√ß√£o e legibilidade.
            3.  **Otimiza√ß√£o:** Identifique poss√≠veis gargalos de desempenho (ex: SELECT *, uso excessivo de JOINs, subqueries ineficientes).
            4.  **Seguran√ßa:** Aponte vulnerabilidades de seguran√ßa (ex: inje√ß√£o de SQL).
            
            Retorne um relat√≥rio claro e conciso, listando os problemas encontrados e sugerindo solu√ß√µes para cada um. Se o c√≥digo estiver correto e seguir as boas pr√°ticas, apenas retorne "C√≥digo SQL validado com sucesso. Nenhuma melhoria significativa necess√°ria."
            
            ---
            
            C√≥digo SQL a ser analisado:
            {codigo_sql}
            """

            # 3. Faz a chamada √† API com a mensagem de texto
            response = self.openai_client.chat.completions.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=500  # Aumentado para um relat√≥rio mais detalhado
            )

            conteudo = response.choices[0].message.content
            return f"Relat√≥rio de Valida√ß√£o SQL:\n\n{conteudo}"

        except FileNotFoundError:
            return f"Erro: Arquivo n√£o encontrado no caminho: {caminho_sql}"
        except Exception as e:
            return f"Erro na OCRiza√ß√£o: {str(e)}. Verifique sua chave de API."

    def analisar_intent(self, mensagem):
        """
        Analisa a inten√ß√£o do usu√°rio e decide qual ferramenta usar
        Em um cen√°rio real, isso seria feito por um LLM
        """
        mensagem_lower = mensagem.lower()

        # Detec√ß√£o de CEP (formato simples)
        if "cep" in mensagem_lower or any(char.isdigit() for char in mensagem if len([c for c in mensagem if c.isdigit()]) == 8):
            cep = ''.join(filter(str.isdigit, mensagem))
            if len(cep) == 8:
                return "buscar_cep", cep

        # Detec√ß√£o de c√°lculo
        if any(op in mensagem for op in ["+", "-", "*", "/", "calcul", "soma", "multiplica√ß√£o"]):
            # Extrai n√∫meros e operadores da mensagem
            import re
            expressao = re.findall(r'[\d+\-*/().]+', mensagem)
            if expressao:
                return "calcular", ''.join(expressao)

        # Detec√ß√£o de solicita√ß√£o de data/hora
        if any(palavra in mensagem_lower for palavra in ["hora", "data", "agora", "hoje", "tempo"]):
            return "obter_data_hora", None

        # Detec√ß√£o de OCR por palavras-chave e extens√£o de arquivo
        if any(p in mensagem_lower for p in ["valide", "validar", "verificar"]):
            partes = mensagem.split()
            for parte in partes:
                if parte.endswith(('.sql', '.sqlx')):
                    return "validar_sql", parte

        return None, None

    def processar_mensagem(self, mensagem):
        """
        Processa uma mensagem do usu√°rio
        """
        # Adiciona √† mem√≥ria
        self.memoria.append(
            {"tipo": "usuario", "conteudo": mensagem, "timestamp": datetime.now()})

        # Analisa inten√ß√£o
        ferramenta, parametro = self.analisar_intent(mensagem)

        if ferramenta and ferramenta in self.ferramentas:
            # Executa a ferramenta
            if parametro:
                resultado = self.ferramentas[ferramenta](parametro)
            else:
                resultado = self.ferramentas[ferramenta]()

            resposta = f"ü§ñ Executei a ferramenta '{ferramenta}': {resultado}"
        else:
            # Resposta padr√£o quando n√£o identifica uma ferramenta espec√≠fica
            resposta = f"ü§ñ Recebi sua mensagem: '{mensagem}'. Posso ajudar com consulta de CEP, c√°lculos simples ou informar data/hora atual."

        # Adiciona resposta √† mem√≥ria
        self.memoria.append(
            {"tipo": "agente", "conteudo": resposta, "timestamp": datetime.now()})

        return resposta

    def mostrar_memoria(self):
        """Exibe o hist√≥rico da conversa"""
        print("\nüìö HIST√ìRICO DA CONVERSA:")
        print("-" * 50)
        for entrada in self.memoria:
            tipo = "üë§ USU√ÅRIO" if entrada["tipo"] == "usuario" else "ü§ñ AGENTE"
            print(f"{tipo}: {entrada['conteudo']}")
            print(f"   ‚è∞ {entrada['timestamp'].strftime('%H:%M:%S')}")
            print()


def main():
    """Fun√ß√£o principal para demonstra√ß√£o"""
    print("üöÄ AGENTE SIMPLES - DEMONSTRA√á√ÉO PR√ÅTICA")
    print("=" * 50)
    print("Funcionalidades dispon√≠veis:")
    print("‚Ä¢ Consulta de CEP (digite um CEP de 8 d√≠gitos)")
    print("‚Ä¢ C√°lculos simples (ex: 10 + 5 * 2)")
    print("‚Ä¢ Data/hora atual (pergunte 'que horas s√£o?')")
    print("‚Ä¢ Validacao de SQL (ex: 'valide script.sql')")
    print("‚Ä¢ Digite 'memoria' para ver o hist√≥rico")
    print("‚Ä¢ Digite 'sair' para encerrar")
    print("-" * 50)

    # Inicializa o agente
    agente = AgenteSimples()

    while True:
        try:
            mensagem = input("\nüë§ Voc√™: ").strip()

            if mensagem.lower() == 'sair':
                print("üëã Encerrando o agente. At√© logo!")
                break
            elif mensagem.lower() == 'memoria':
                agente.mostrar_memoria()
                continue
            elif not mensagem:
                continue

            # Processa a mensagem
            resposta = agente.processar_mensagem(mensagem)
            print(resposta)

        except KeyboardInterrupt:
            print("\n\nüëã Agente interrompido pelo usu√°rio.")
            break
        except Exception as e:
            print(f"‚ùå Erro: {str(e)}")


if __name__ == "__main__":  # Essa linha √© usada para controlar a execu√ß√£o de um script Python. Ela verifica se o arquivo est√° sendo executado diretamente ou se est√° sendo importado como m√≥dulo em outro script.
    main()
